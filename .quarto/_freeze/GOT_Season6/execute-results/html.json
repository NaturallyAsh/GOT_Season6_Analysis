{
  "hash": "915ae1403e29f0debc675e4b5dab364d",
  "result": {
    "markdown": "---\ntitle: \"Game of Thrones Season 6 Network Analysis\"\nauthor: \"Ashleigh Wilson\"\npage-layout: article\n---\n\n\n::: {.panel-tabset}\n\n## Overview\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Explore\n\nLoad datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_s6_edges <- read_csv(\"data/got-s6-edges.csv\")\n\ngot_s6_nodes <- read_csv(\"data/got-s6-nodes.csv\")\n```\n:::\n\n\n\nExamine the structure  \n\n::: {.cell}\n\n```{.r .cell-code}\nstr(got_s6_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspec_tbl_df [542 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Source: chr [1:542] \"JON\" \"MISSANDEI\" \"TYRION\" \"ARYA\" ...\n $ Target: chr [1:542] \"SANSA\" \"TYRION\" \"VARYS\" \"JAQEN\" ...\n $ Weight: num [1:542] 151 88 86 83 82 81 80 80 76 76 ...\n $ Season: num [1:542] 6 6 6 6 6 6 6 6 6 6 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Source = col_character(),\n  ..   Target = col_character(),\n  ..   Weight = col_double(),\n  ..   Season = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n\n```{.r .cell-code}\nstr(got_s6_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspec_tbl_df [142 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Id   : chr [1:142] \"AERON\" \"AERYS\" \"ALLISER_THORNE\" \"AREO\" ...\n $ Label: chr [1:142] \"Aeron\" \"Aerys\" \"Alliser\" \"Areo\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Id = col_character(),\n  ..   Label = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\nGOT edge names: `Source`, `Target`, `Weight`, `Season`  \nGOT node names: `Id`, `Label`  \n\n\n---\n\nCreate igraph object\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_igraph <- graph_from_data_frame(\n  got_s6_edges,\n  directed = FALSE,\n  vertices = got_s6_nodes\n)\n```\n:::\n\n\n\n\nCreate a tidygraph object\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_tidygraph <- tbl_graph(nodes = got_s6_nodes, edges = got_s6_edges, directed = FALSE)\n\ngot_tidygraph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 142 nodes and 542 edges\n#\n# An undirected multigraph with 2 components\n#\n# Node Data: 142 × 2 (active)\n  Id             Label         \n  <chr>          <chr>         \n1 AERON          Aeron         \n2 AERYS          Aerys         \n3 ALLISER_THORNE Alliser       \n4 AREO           Areo          \n5 ARTHUR         Arthur        \n6 ARTHUR_CHILD   Arthur (child)\n# … with 136 more rows\n#\n# Edge Data: 542 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1    54   117    151      6\n2    84   132     88      6\n3   132   135     86      6\n# … with 539 more rows\n```\n:::\n:::\n\n\n<!-- \nGround truth graph:\nggraph(got_tidygraph) +\n  geom_edge_link() +\n  geom_node_point()\n-->\n\n<!-- \ncount clusters:\nnet1 |> \n  activate(nodes) |> \n  select(cluster) |> \n  pull() |> unique() |> sort()\n-->\n\n### Communities and centralities.  \n\n*Communities* are subset clusters of a graph network. Community detection algorithms seek to build clusters that have high edge density between nodes inside each cluster, and have low edge density between nodes in different clusters. These algorithms quantify communities using a measure called **Modularity**. Modularity measures how dense the connections are within clusters of nodes. The higher the modularity (ranging from -1 to 1) the more connected nodes are inside clusters compared to between clusters.   \n\nA common community detection algorithm is the Louvain algorithm which seeks to maximize modularity. Tidygraph comes with some handy functions (prefixed with `group_`) to easily calculate communities.  \n\n*Centrality measures* describe the importance or influence of a vertex in the connected structure of a graph. For this project I focus of three common types of centrality measures:  \n- *Degree centrality* - the raw measure of the number of connections between nodes. So, this will show the number of people a GOT character has interacted with one or more times.  \n- *Betweenness centrality* - is a measure of how important a given vertex is in connecting other pairs of nodes in the graph. It describes the number of shortest paths between nodes. Nodes with high betweenness centrality are on the path between many other nodes, i.e. they are characters who are key connections or bridges between different groups of nodes. Characters with higher betweenness centrality can be regarded as influential and crucial players due to their intermediary position in the network. Their removal (or murder, as is common for GOT characters) from the network has the highest risk of cutting off informational flow and overall disconnection.  \n- *Node ranking* - The rank of a given node, measured in terms of degree of connectivity, is determined by the set of nodes that point to it. PageRank centrality is a measure that considers nodes more important if they have many incoming edges.   \n\n::: {.cell}\n\n```{.r .cell-code}\nnet1 <- got_tidygraph |> \n  activate(nodes) |> \n  mutate(\n    cluster = group_louvain(),\n    between = centrality_betweenness(),\n    rank = centrality_pagerank()\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in betweenness(graph = graph, v = V(graph), directed = directed, :\n'nobigint' is deprecated since igraph 1.3 and will be removed in igraph 1.4\n```\n:::\n:::\n\n\n\n### Graph network with all characters in season 6  \n\nWe can use `ggraph` to visualize the clusters of highly connected characters in season 6.  \n\nThe thickness of lines are based on edge weights and represent the strength of a connection between characters.  \n\nThe clusters of colored nodes represent communities of highly connected characters.  \n\nThe size of nodes is each character's betweenness. The larger the size of the node, the greater impact the character's importance and their influence on the spread of information.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nggraph(net1, layout = \"stress\") +\n  geom_edge_link2(aes(alpha = Weight)) +\n  geom_node_point(aes(color = factor(cluster), size = between)) + # remember to convert cluster to factor\n  geom_node_text(aes(label = Label, size = rank)) +\n  theme_graph() +\n  theme(\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](GOT_Season6_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n<!-- \nCalculate and graph key players:\n\n# not fully sure what's behind the node_is_keyplayer() algorithm.\nkey_players <- net1 |> \n  activate(nodes) |> \n  mutate(key = node_is_keyplayer(10)) |> \n  filter(key == TRUE) |> \n  select(Label) |> \n  pull()\n\nnet1 |> \n  activate(nodes) |> \n  mutate(Label = ifelse(\n    Label %in% key_players,\n    key_players,\n    \"\"\n  )) |> \n  ggraph(layout = \"stress\") +\n  geom_edge_link2(aes(alpha = Weight), show.legend = FALSE) +\n  geom_node_point(aes(color = factor(cluster), size = between), show.legend = FALSE) + # remember to convert cluster to factor\n  geom_node_text(aes(label = Label, size = rank), show.legend = FALSE)\n-->\n\n\n\n### Top character in each community.\n\nHere we'll look for the most important character in each community based on the degree, or the number of connections, each character has in the network.  \n\n::: {.cell}\n\n```{.r .cell-code}\n# get total number of communities\ngot_clusters <- net1 |> \n  activate(nodes) |> \n  select(cluster) |> \n  pull() |> unique() |> sort()\n\ntop_characters <- c()\n\n# Quick print view of the top characters of each community by degree centrality.\nfor (i in got_clusters) {\n  tops <- net1 |> \n    activate(nodes) |> \n    mutate(degree = centrality_degree()) |> \n    filter(cluster == i) |> \n    arrange(desc(degree)) \n  \n  print(tops)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 39 nodes and 158 edges\n#\n# An undirected multigraph with 1 component\n#\n# Node Data: 39 × 6 (active)\n  Id         Label      cluster between    rank degree\n  <chr>      <chr>        <int>   <dbl>   <dbl>  <dbl>\n1 SANSA      Sansa            1  2592.  0.0284      40\n2 JON        Jon              1  1889.  0.0233      31\n3 DAVOS      Davos            1   227.  0.0171      23\n4 TORMUND    Tormund          1   217.  0.0156      21\n5 RAMSAY     Ramsay           1   587.  0.0161      19\n6 MELISANDRE Melisandre       1    57.8 0.00943     13\n# … with 33 more rows\n#\n# Edge Data: 158 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     1     2    151      6\n2     3     6     82      6\n3     2     3     80      6\n# … with 155 more rows\n# A tbl_graph: 25 nodes and 75 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 25 × 6 (active)\n  Id        Label     cluster between    rank degree\n  <chr>     <chr>       <int>   <dbl>   <dbl>  <dbl>\n1 TYRION    Tyrion          2 1466.   0.0202      26\n2 DAENERYS  Daenerys        2  821.   0.0175      18\n3 VARYS     Varys           2  489.   0.0143      16\n4 THEON     Theon           2  846.   0.0111      13\n5 MISSANDEI Missandei       2  141.   0.00950     10\n6 GREY_WORM Grey Worm       2    8.97 0.00797      9\n# … with 19 more rows\n#\n# Edge Data: 75 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     1     5     88      6\n2     1     3     86      6\n3     1     6     81      6\n# … with 72 more rows\n# A tbl_graph: 17 nodes and 64 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 17 × 6 (active)\n  Id           Label        cluster between    rank degree\n  <chr>        <chr>          <int>   <dbl>   <dbl>  <dbl>\n1 CERSEI       Cersei             3 1157.   0.0203      27\n2 JAIME        Jaime              3 1288.   0.0185      24\n3 MARGAERY     Margaery           3  434.   0.0122      17\n4 OLENNA       Olenna             3 1121.   0.0120      14\n5 HIGH_SPARROW High Sparrow       3    8.13 0.00785     10\n6 KEVAN        Kevan              3    6.23 0.00790     10\n# … with 11 more rows\n#\n# Edge Data: 64 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     3     5     76      6\n2     1     2     66      6\n3     5     7     49      6\n# … with 61 more rows\n# A tbl_graph: 14 nodes and 44 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 14 × 6 (active)\n  Id               Label            cluster between    rank degree\n  <chr>            <chr>              <int>   <dbl>   <dbl>  <dbl>\n1 NED              Ned                    4 1112.   0.0184      23\n2 BRAN             Bran                   4  626.   0.0143      17\n3 THREE_EYED_RAVEN Three Eyed Raven       4   26.9  0.00983     11\n4 HODOR            Hodor                  4   21.3  0.00809      9\n5 BENJEN           Benjen                 4    6.80 0.00650      7\n6 MEERA            Meera                  4    1.2  0.00657      7\n# … with 8 more rows\n#\n# Edge Data: 44 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     2     3     76      6\n2     2     6     51      6\n3     4     6     39      6\n# … with 41 more rows\n# A tbl_graph: 12 nodes and 38 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 12 × 6 (active)\n  Id         Label      cluster between    rank degree\n  <chr>      <chr>        <int>   <dbl>   <dbl>  <dbl>\n1 ARYA       Arya             5   326.  0.0126      17\n2 LADY_CRANE Lady Crane       5    62.4 0.0102      14\n3 BOBONO     Bobono           5    38.3 0.00924     13\n4 IZEMBARO   Izembaro         5    31.9 0.00931     13\n5 BIANCA     Bianca           5    34.8 0.00856     12\n6 CLARENZO   Clarenzo         5    10.8 0.00856     12\n# … with 6 more rows\n#\n# Edge Data: 38 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     1    11     83      6\n2     1     2     64      6\n3     1    12     48      6\n# … with 35 more rows\n# A tbl_graph: 9 nodes and 19 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 9 × 6 (active)\n  Id      Label   cluster between    rank degree\n  <chr>   <chr>     <int>   <dbl>   <dbl>  <dbl>\n1 ELLARIA Ellaria       6   322.  0.00978      8\n2 TYENE   Tyene         6   192   0.00842      7\n3 DORAN   Doran         6     1.5 0.00681      5\n4 NYMERIA Nymeria       6    65.5 0.00627      5\n5 OBARA   Obara         6    65.5 0.00627      5\n6 AREO    Areo          6     0   0.00543      4\n# … with 3 more rows\n#\n# Edge Data: 19 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     4     5      9      6\n2     1     3      8      6\n3     4     9      7      6\n# … with 16 more rows\n# A tbl_graph: 9 nodes and 19 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 9 × 6 (active)\n  Id           Label        cluster between    rank degree\n  <chr>        <chr>          <int>   <dbl>   <dbl>  <dbl>\n1 BRYNDEN      Brynden            7   333.  0.0104      11\n2 EDMURE       Edmure             7   168.  0.0101      10\n3 WALDER       Walder             7    56.1 0.00711      8\n4 BRONN        Bronn              7    12.2 0.00641      7\n5 BLACK_WALDER Black Walder       7     0   0.00572      6\n6 LOTHAR       Lothar             7     0   0.00572      6\n# … with 3 more rows\n#\n# Edge Data: 19 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     5     6     15      6\n2     3     5     15      6\n3     1     2     11      6\n# … with 16 more rows\n# A tbl_graph: 9 nodes and 23 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 9 × 6 (active)\n  Id      Label   cluster between    rank degree\n  <chr>   <chr>     <int>   <dbl>   <dbl>  <dbl>\n1 SAM     Sam           8  1010.  0.0113       9\n2 GILLY   Gilly         8     2.7 0.00882      7\n3 MELESSA Melessa       8     0.2 0.00747      6\n4 RANDYLL Randyll       8     0.2 0.00747      6\n5 TALLA   Talla         8     0.2 0.00747      6\n6 DICKON  Dickon        8     0   0.00637      5\n# … with 3 more rows\n#\n# Edge Data: 23 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     1     2     80      6\n2     1     7     21      6\n3     1     3     21      6\n# … with 20 more rows\n# A tbl_graph: 8 nodes and 14 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 8 × 6 (active)\n  Id     Label  cluster between    rank degree\n  <chr>  <chr>    <int>   <dbl>   <dbl>  <dbl>\n1 LEM    Lem          9       7 0.0113       6\n2 HOUND  Sandor       9       7 0.0101       5\n3 RAY    Ray          9       2 0.00780      4\n4 BERIC  Beric        9       0 0.00612      3\n5 FLYNN  Flynn        9       0 0.00602      3\n6 MORGAN Morgan       9       0 0.00602      3\n# … with 2 more rows\n#\n# Edge Data: 14 × 4\n   from    to Weight Season\n  <int> <int>  <dbl>  <dbl>\n1     2     3     41      6\n2     2     4     26      6\n3     2     7     25      6\n# … with 11 more rows\n```\n:::\n\n```{.r .cell-code}\n# Store the names of the top characters of each community to a vector\nfor (i in got_clusters) {\n  tops <- net1 |> \n    activate(nodes) |> \n    mutate(degree = centrality_degree()) |> \n    filter(cluster == i) |> \n    arrange(desc(degree)) |> \n    top_n(degree, n = 1) |> \n    pull(Label)\n  \n  top_characters <- top_characters |> append(tops)\n}\n\ntop_characters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sansa\"   \"Tyrion\"  \"Cersei\"  \"Ned\"     \"Arya\"    \"Ellaria\" \"Brynden\"\n[8] \"Sam\"     \"Lem\"    \n```\n:::\n:::\n\n\n\n\nGraph displaying top characters in each community.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntop_char_net <- net1 |> \n  activate(nodes) |> \n  mutate(\n    Label = ifelse(\n    Label %in% top_characters,\n    Label,\n    \"\"\n  ))\n\nggraph(top_char_net, layout = \"stress\") +\n  geom_edge_link2(aes(alpha = Weight)) +\n  geom_node_point(aes(color = factor(cluster), size = between)) + # remember to convert cluster to factor\n  geom_node_text(aes(label = Label, size = rank)) + \n  theme_graph() + \n  theme(\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](GOT_Season6_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n",
    "supporting": [
      "GOT_Season6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}